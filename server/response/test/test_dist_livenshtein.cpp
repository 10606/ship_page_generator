#include "dist_livenshtein.h"

#include <string_view>
#include <limits>
#include <iostream>
#include <vector>
#include <set>

std::string_view names [] =
{
    "Hosho",
    "Akagi",
    "Kaga",
    "Ryujo",
    "Soryu",
    "Hiryu",
    "Ryuho",
    "Shokaku",
    "Zuikaku",
    "Zuiho",
    "Shoho",
    "Junyo",
    "Hiyo",
    "Taiho",
    "Shinano",
    "Unryu",
    "Amagi",
    "Katsuragi",
    "Taiyo",
    "Unyo",
    "Chuyo",
    "Kaiyo",
    "Shinyo",
    "Chitose",
    "Chiyoda",
    "Mizuho",
    "Nisshin",
    "Akitsushima",
    "Akitsu Maru",
    "Nigitsu Maru",
    "Yamashio Maru",
    "Kumano Maru",
    "Shimane Maru",
    "Kongo",
    "Hiei",
    "Kirishima",
    "Haruna",
    "Fuso",
    "Yamashiro",
    "Ise",
    "Hyuga",
    "Nagato",
    "Mutsu",
    "Yamato",
    "Musashi",
    "Momi",
    "Kaya",
    "Nashi",
    "Take",
    "Kaki",
    "Tsuga",
    "Nire",
    "Kuri",
    "Kiku",
    "Aoi",
    "Hagi",
    "Fuji",
    "Susuki",
    "Hishi",
    "Hasu",
    "Warabi",
    "Tade",
    "Sumire",
    "Tsuta",
    "Ashi",
    "Yomogi",
    "Minekaze",
    "Sawakaze",
    "Okikaze",
    "Shimakaze",
    "Nadakaze",
    "Yakaze",
    "Hakaze",
    "Shiokaze",
    "Akikaze",
    "Yukaze",
    "Tachikaze",
    "Hokaze",
    "Nokaze",
    "Namikaze",
    "Numakaze",
    "Wakatake",
    "Kuretake",
    "Sanae",
    "Sawarabi",
    "Asagao",
    "Yugao",
    "Fuyo",
    "Karukaya",
    "Kamikaze",
    "Asakaze",
    "Harukaze",
    "Matsukaze",
    "Hatakaze",
    "Oite",
    "Hayate",
    "Asanagi",
    "Yunagi",
    "Mutsuki",
    "Kisaragi",
    "Yayoi",
    "Uzuki",
    "Satsuki",
    "Minazuki",
    "Fumizuki",
    "Nagatsuki",
    "Kikuzuki",
    "Mikazuki",
    "Mochizuki",
    "Yuzuki",
    "Fubuki",
    "Shirayuki",
    "Hatsuyuki",
    "Miyuki",
    "Murakumo",
    "Sinonome",
    "Usugumo",
    "Shirakumo",
    "Isonami",
    "Uranami",
    "Ayanami",
    "Shikinami",
    "Asagiri",
    "Yugiri",
    "Amagiri",
    "Sagiri",
    "Oboro",
    "Akebono",
    "Sazanami",
    "Ushio",
    "Akatsuki",
    "Inazuma",
    "Ikazuchi",
    "Hibiki",
    "Hatsuharu",
    "Nenohi",
    "Wakaba",
    "Hatsushimo",
    "Ariake",
    "Kaede",
    "Yugure",
    "Shiratsuyu",
    "Shigure",
    "Murasame",
    "Yudachi",
    "Samidare",
    "Harusame",
    "Yamakaze",
    "Kawakaze",
    "Umikaze",
    "Suzukaze",
    "Asashio",
    "Oshio",
    "Michishio",
    "Arashio",
    "Natsugumo",
    "Yamagumo",
    "Minegumo",
    "Asagumo",
    "Arare",
    "Kasumi",
    "Kagero",
    "Shiranui",
    "Kuroshio",
    "Oyashio",
    "Hayashio",
    "Natsushio",
    "Hatsukaze",
    "Yukikaze",
    "Amatsukaze",
    "Tokitsukaze",
    "Urakaze",
    "Isokaze",
    "Hamakaze",
    "Tanikaze",
    "Nowaki",
    "Arashi",
    "Hagikaze",
    "Maikaze",
    "Akigumo",
    "Yugumo",
    "Makigumo",
    "Kazagumo",
    "Naganami",
    "Makinami",
    "Takanami",
    "Onami",
    "Kiyonami",
    "Tamanami",
    "Suzunami",
    "Fujinami",
    "Hayanami",
    "Hamanami",
    "Okinami",
    "Kishinami",
    "Asashimo",
    "Hayashimo",
    "Akishimo",
    "Kiyoshimo",
    "Akizuki",
    "Teruzuki",
    "Suzutsuki",
    "Hatsuzuki",
    "Niizuki",
    "Wakatsuki",
    "Shimotsuki",
    "Fuyutsui",
    "Harutsuki",
    "Yozuki",
    "Natsuzuki",
    "Hanazuki",
    "Shimakaze",
    "Chidori",
    "Minazuru",
    "Tomozuru",
    "Hatsukari",
    "Otori",
    "Hiyodori",
    "Hayabusa",
    "Kasasagi",
    "Kiji",
    "Kari",
    "Sagi",
    "Hato",
    "Shimushu",
    "Hachijo",
    "Kunashiri",
    "Ishigaki",
    "Etorofu",
    "Mutsure",
    "Hirado",
    "Amakusa",
    "Oki",
    "Fukae",
    "Kanju",
    "Kasado",
    "Sado",
    "Tsushima",
    "Matsuwa",
    "Wakamiya",
    "Manju",
    "Iki",
    "Mikura",
    "Miyake",
    "Awaji",
    "Kurahashi",
    "Nomi",
    "Chiburi",
    "Yashiro",
    "Kusagaki",
    "Ukuru",
    "Okinawa",
    "Shinnan",
    "Yaku",
    "Aguni",
    "Inagi",
    "Uku",
    "Chikubu",
    "Habushi",
    "Kuga",
    "Ojika",
    "Kozu",
    "Kanawa",
    "Shiga",
    "Amami",
    "Hodaka",
    "Iwo",
    "Takane",
    "Ikara",
    "Ikuno",
    "Matsu",
    "Take",
    "Ume",
    "Momo",
    "Kuwa",
    "Kiri",
    "Sugi",
    "Maki",
    "Momi",
    "Kashi",
    "Kaya",
    "Nara",
    "Sakura",
    "Yanagi",
    "Tsubaki",
    "Hinoki",
    "Keyaki",
    "Kaki",
    "Kaba",
    "Tachibana",
    "Tsuta",
    "Hagi",
    "Sumire",
    "Kusunoki",
    "Hatsuzakura",
    "Nire",
    "Nashi",
    "Shii",
    "Enoki",
    "Odake",
    "Hatsuume",
    "Hiburi",
    "Daito",
    "Shonan",
    "Kume",
    "Ikuna",
    "Shisaka",
    "Sakito",
    "Mokuto",
    "Habuto",
    "Furutaka",
    "Kako",
    "Aoba",
    "Kinugasa",
    "Myoko",
    "Nachi",
    "Ashigara",
    "Haguro",
    "Takao",
    "Atago",
    "Maya",
    "Chokai",
    "Mogami",
    "Mikuma",
    "Suzuya",
    "Kumano",
    "Tone",
    "Chikuma",
    "Tenryu",
    "Tatsuta",
    "Kuma",
    "Tama",
    "Kitakami",
    "Oi",
    "Kiso",
    "Nagara",
    "Isuzu",
    "Natori",
    "Yura",
    "Abukuma",
    "Kinu",
    "Sendai",
    "Jintsu",
    "Naka",
    "Agano",
    "Noshiro",
    "Yahagi",
    "Sakawa",
    "Yubari",
    "Oyodo",
    "Noshiro Maru",
    "Katori",
    "Kashima",
    "Kashii",
    "I-25",
    "repair section 102",
    "repair section 103",
    "Akashi",
    "repair section 101",
    "I-5",
    "I-6",
    "I-7",
    "I-8",
    "I-9",
    "I-10",
    "I-11",
    "I-12",
    "I-13",
    "I-14",
    "I-15",
    "I-17",
    "I-19",
    "I-21",
    "I-23",
    "I-26",
    "I-27",
    "I-28",
    "I-29",
    "I-30",
    "I-31",
    "I-32",
    "I-33",
    "I-34",
    "I-35",
    "I-36",
    "I-37",
    "I-38",
    "I-39",
    "I-16",
    "I-18",
    "I-20",
    "I-22",
    "I-24",
    "I-400",
    "I-401",
    "I-402",
    "I-40",
    "I-41",
    "I-42",
    "I-43",
    "I-44",
    "I-45",
    "I-54",
    "I-56",
    "I-58",
    "I-361",
    "I-362",
    "I-363",
    "I-364",
    "I-365",
    "I-366",
    "I-367",
    "I-368",
    "I-369",
    "I-370",
    "I-371",
    "I-51",
    "I-152",
    "I-1",
    "I-2",
    "I-3",
    "I-4",
    "I-121",
    "I-122",
    "I-123",
    "I-124",
    "I-153",
    "I-154",
    "I-155",
    "I-156",
    "I-157",
    "I-158",
    "I-159",
    "I-60",
    "I-63",
    "I-61",
    "I-162",
    "I-164",
    "I-165",
    "I-166",
    "I-67",
    "I-168",
    "I-169",
    "I-70",
    "I-171",
    "I-172",
    "I-73",
    "I-174",
    "I-175",
    "I-176",
    "I-177",
    "I-178",
    "I-179",
    "I-180",
    "I-181",
    "I-182",
    "I-183",
    "I-184",
    "I-185",
    "I-46",
    "I-47",
    "I-48",
    "I-351",
    "I-372",
    "I-373",
    "I-201",
    "I-202",
    "I-203",
    "I-52",
    "I-53",
    "I-55",
    "RO-60",
    "RO-61",
    "RO-62",
    "RO-63",
    "RO-64",
    "RO-65",
    "RO-66",
    "RO-67",
    "RO-68",
    "RO-35",
    "RO-36",
    "RO-37",
    "RO-38",
    "RO-39",
    "RO-40",
    "RO-41",
    "RO-42",
    "RO-43",
    "RO-44",
    "RO-45",
    "RO-46",
    "RO-47",
    "RO-48",
    "RO-49",
    "RO-50",
    "RO-55",
    "RO-56",
    "RO-33",
    "RO-34",
    "RO-100",
    "RO-101",
    "RO-102",
    "RO-103",
    "RO-104",
    "RO-105",
    "RO-106",
    "RO-107",
    "RO-108",
    "RO-109",
    "RO-110",
    "RO-111",
    "RO-112",
    "RO-113",
    "RO-114",
    "RO-115",
    "RO-116",
    "RO-117",
    "HA-201",
    "HA-202",
    "HA-203",
    "HA-204",
    "HA-205",
    "HA-207",
    "HA-208",
    "HA-209",
    "HA-210",
    "HA-216",
    "RO-57",
    "RO-58",
    "RO-59",
};


std::string_view requests [] =
{
    "qwerty",
    "wertyu",
    "ertyui",
    "rtyuio",
    "tyuiop",
    "asdfgh",
    "sdfghj",
    "dfghjk",
    "fghjkl",
    "zxcvbn",
    "xcvbnm",
    
    "poiuytr",
    "oiuytre",
    "iuytrew",
    "uytreeq",
    "lkjhgfd",
    "kjhgfds",
    "jhgfdsa",
    "mnbvcxz",

    "ikaze",
    "kadze",
    "Terutsuki",
    "Teruzuki",
    "Terudzuki",
    "ashi",
    
    "Nasi",
};


int main ()
{
    auto find_best = [] (std::string_view request) -> std::set <std::pair <size_t, size_t> >
    {
        static const constexpr size_t threshold = 30;
        static const constexpr size_t max_diff_cost = 10;
        size_t min_dist = std::numeric_limits <size_t> ::max();
        std::set <std::pair <size_t, size_t> > answer;
        for (size_t i = 0; i != std::extent_v <decltype(names)>; ++i)
        {
            size_t cur = dist_livenshtein(request, names[i]);
            if (cur > threshold)
                continue;
            if (cur < min_dist)
            {
                min_dist = cur;
                answer.insert({cur, i});
                while (!answer.empty())
                {
                    std::set <std::pair <size_t, size_t> > ::iterator it = answer.end();
                    it--;
                    if (it->first <= min_dist + max_diff_cost)
                        break;
                    answer.erase(it);
                }
            }
            else if (cur <= min_dist + max_diff_cost)
                answer.insert({cur, i});
        }
        return answer;
    };
    
    size_t acc = 0;
    for (size_t i = 0; i != 100000; ++i)
    {
        std::string_view request = requests[i % std::extent_v <decltype(requests)>];
        std::set <std::pair <size_t, size_t> > answer = find_best(request);
        if (!answer.empty())
            acc += answer.begin()->first + 3 * answer.begin()->second;
    }
    std::cout << acc << std::endl;

    for (size_t i = 0; i != std::extent_v <decltype(requests)>; ++i)
    {
        std::string_view request = requests[i];
        std::set <std::pair <size_t, size_t> > answer = find_best(request);
        std::cout << request << " -> " << std::endl;
        for (std::pair <size_t, size_t> matched : answer)
            std::cout << "    " << names[matched.second] << " (" << matched.first << ")" << std::endl;
    }
    
    /*
    size_t best = 139;
    std::cout << names[best] << " " << names[best].size() << std::endl;
    std::cout << requests[0] << " " << requests[0].size() << std::endl;
    std::cout << dist_livenshtein(names[best], requests[0]) << std::endl;
    std::cout << dist_livenshtein(requests[0], names[best]) << std::endl;
    */

    // std::cout << dist_livenshtein("ikaze", "Umikaze") << std::endl;
    // std::cout << dist_livenshtein("lkjhgfd", "Akagi") << std::endl;
    // std::cout << dist_livenshtein("Terutsuki", "Teruzuki") << std::endl;
    // std::cout << dist_livenshtein("qwerty", "Tenryu") << std::endl;
    // std::cout << dist_livenshtein("kadze", "Isokaze") << std::endl;
    std::cout << dist_livenshtein("Nasi", "Nachi") << std::endl;
}


